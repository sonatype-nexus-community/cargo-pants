// Copyright 2019 Glenn Mohre, and Sonatype.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use crate::calculate_term_width;
use console::style;
use console::StyledObject;
use serde::Deserialize;
use std::fmt;
use std::io::Write;

use term_table::row::Row;
use term_table::table_cell::TableCell;

#[derive(Debug, Default, Deserialize, Clone)]
#[serde(rename_all = "camelCase")]
pub struct Vulnerability {
    pub id: String,
    pub display_name: String,
    pub title: String,
    pub cve: Option<String>,
    pub cwe: Option<String>,
    pub description: String,
    pub cvss_score: f32,
    pub cvss_vector: String,
    pub reference: String,
}

impl Vulnerability {
    fn print_value_with_color(&self, value: String, enable_color: bool) -> StyledObject<String> {
        if enable_color {
            match self.cvss_score as u8 {
                9..=10 => style(value).red().bold(),
                7..=8 => style(value).red(),
                4..=6 => style(value).yellow(),
                _ => style(value).green(),
            }
        } else {
            style(value)
        }
    }

    pub fn output_table(
        &self,
        output: &mut dyn Write,
        enable_color: bool,
        width_override: Option<u16>,
    ) -> std::io::Result<()> {
        self.generate_vuln_table(output, enable_color, width_override)
    }

    fn generate_vuln_table(
        &self,
        output: &mut dyn Write,
        enable_color: bool,
        width_override: Option<u16>,
    ) -> std::io::Result<()> {
        let mut table = term_table::Table::new();
        let mut max_term_width: usize = usize::from(calculate_term_width());

        match width_override {
            Some(width) => max_term_width = usize::from(width),
            None => {}
        }

        write!(output, "\n")?;

        write!(
            output,
            "Vulnerability Title: {}",
            self.print_value_with_color(self.title.clone(), enable_color)
        )?;

        write!(output, "\n")?;

        if cfg!(windows) {
            table.style = term_table::TableStyle::simple();
        } else {
            table.style = term_table::TableStyle::rounded();
        }

        table.add_row(Row::new(vec![
            TableCell::new("ID"),
            TableCell::new_with_col_span(self.id.clone(), 1),
        ]));
        table.add_row(Row::new(vec![
            TableCell::new("Description"),
            TableCell::new_with_col_span(self.description.clone(), 1),
        ]));
        table.add_row(Row::new(vec![
            TableCell::new("CVSS Score"),
            TableCell::new_with_alignment(
                self.print_value_with_color(self.cvss_score.to_string(), enable_color),
                1,
                term_table::table_cell::Alignment::Left,
            ),
        ]));
        table.add_row(Row::new(vec![
            TableCell::new("CVSS Vector"),
            TableCell::new_with_alignment(
                self.cvss_vector.to_string(),
                1,
                term_table::table_cell::Alignment::Left,
            ),
        ]));
        table.add_row(Row::new(vec![
            TableCell::new("Reference"),
            TableCell::new_with_col_span(self.reference.clone(), 1),
        ]));

        table.set_max_width_for_column(0, 15);
        table.set_max_width_for_column(1, max_term_width.clone() - 25);

        write!(output, "{}", table.render())
    }
}

impl fmt::Display for Vulnerability {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "{}\n{}\n{}\n{}\n{}\n{}",
            self.title,
            self.id,
            self.description,
            self.cvss_score,
            self.cvss_vector,
            self.reference
        )
    }
}
